import fs from "fs";
import dotenv from "dotenv";
import path from "path";

/* validaci√≥n autom√°tica de variables de entorno en vite.config.ts, que se ejecuta al iniciar el build o dev, y lanza un error si falta alguna o si alguna est√° vac√≠a */
export function validateEnvVariables(
  env: Record<string, string>,
  requiredVars: string[],
  mode: string
) {
  const missing = requiredVars.filter(
    (key) => !env[key] || env[key].trim() === ""
  );

  /* OPCI√ìN 1: ideal para entornos donde se prefiere un stack trace completo o para integraciones con CI/CD que atrapan excepciones. */
  /* Un stack trace (en espa√±ol: rastro de pila o traza de pila) es una lista de todas las funciones que se han ido llamando hasta que ocurri√≥ un error. Es lo que se ve cuando el programa lanza un throw new Error(...) o cuando ocurre una excepci√≥n no capturada.
  ¬øPara qu√© sirve?
    - Te dice d√≥nde ocurri√≥ el error exactamente.
    - Muestra la secuencia de llamadas que llev√≥ hasta ese punto.
    - Es √∫til para debuggear: te ayuda a encontrar errores m√°s r√°pido.

  Ejemplo:
    throw new Error("Algo sali√≥ mal");
  */
  if (missing.length > 0) {
    const errorMessage = [
      `\n‚ùå [VITE][${mode}] ERROR: Las siguientes variables de entorno faltan o est√°n vac√≠as:\n`,
      ...missing.map((key) => ` - ${key}`),
      `\nüî∂ Corrige las variables antes de continuar.\n`,
    ].join("\n");

    throw new Error(errorMessage); // Lanza el error en lugar de salir con process.exit
  }

  /* OPCI√ìN 2: para detener el proceso inmediatamente */
  /*
    - Finaliza el proceso inmediatamente
    - No muestra el stack trace (a menos que lo imprimas t√∫ antes)
    - √ötil para scripts simples o cuando no quieres mostrar detalles t√©cnicos
    - El n√∫mero 1 indica error (el 0 ser√≠a una salida exitosa)

    Ejemplo:
      console.error("Algo sali√≥ mal");
      process.exit(1);
  */
  // if (missing.length > 0) {
  //   console.error(
  //     `\n‚ùå [VITE][${mode}] ERROR: Variables de entorno faltantes o vac√≠as:\n`
  //   );
  //   missing.forEach((key) => console.error(` - ${key}`));
  //   console.error("\nüî∂ Corrige las variables antes de continuar.\n");
  //   process.exit(1); // Detiene el proceso
  // }
}

/* funci√≥n utilitaria para que cargue solo un archivo .env espec√≠fico porque en loadEnv(mode, process.cwd(), "") en su tercer argumento (prefix) vac√≠o ("") le dice a Vite: "C√°rgame todas las variables del .env para ese modo, sin importar si empiezan o no con VITE_."" Pero adem√°s, cuando se carga .env.production, Vite no ignora .env ni .env.development ni .env.staging ‚Äî al contrario, los fusiona todos. Es decir, cuando se hace: vite build --mode production

Carga (en este orden, y los √∫ltimos sobreescriben a los primeros):
  - .env
  - .env.development
  - .env.staging
  - .env.production

Cuando se hace vite build --mode production, ambas variables est√°n presentes, porque .env se carga antes que .env.production. Por eso, aunque no se declare, por ejemplo, VITE_APP_SUPABASE_URL en .env.production, igual aparece en env. Con esto se asegura que solo se revisen las variables definidas, por ejemplo, en .env.production*/
export function loadExactEnvFile(mode: string): Record<string, string> {
  const filePath = path.resolve(process.cwd(), `.env.${mode}`);
  if (!fs.existsSync(filePath)) {
    throw new Error(`\n‚ö†Ô∏è  No se encontr√≥ el archivo .env.${mode}\n`);
  }
  const parsed = dotenv.parse(fs.readFileSync(filePath));
  return parsed;
}
